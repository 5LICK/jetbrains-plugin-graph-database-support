/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.neueda.jetbrains.plugin.graphdb.language.cypher.lexer;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.neueda.jetbrains.plugin.graphdb.language.cypher.psi.CypherTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_CypherLexer.flex</tt>
 */
public class _CypherLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\3\1\22\0\1\3\1\67\1\45\1\0\1\35\1\70\1\0\1\43\1\51\1\52\1\47"+
    "\1\63\1\64\1\40\1\42\1\46\1\36\11\41\1\57\1\50\1\61\1\60\1\62\1\65\1\0\1\5"+
    "\1\32\1\7\1\15\1\12\1\24\1\30\1\10\1\16\1\31\1\34\1\21\1\4\1\14\1\20\1\27"+
    "\1\25\1\11\1\17\1\6\1\13\1\22\1\23\1\26\1\33\1\35\1\55\1\44\1\56\1\71\1\35"+
    "\1\37\1\5\1\32\1\7\1\15\1\12\1\24\1\30\1\10\1\16\1\31\1\34\1\21\1\4\1\14\1"+
    "\20\1\27\1\25\1\11\1\17\1\6\1\13\1\22\1\23\1\26\1\33\1\35\1\53\1\66\1\54\1"+
    "\72\6\0\1\1\32\0\1\3\337\0\1\3\177\0\13\3\35\0\2\1\5\0\1\3\57\0\1\3\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\26\3\1\4\1\5\1\6\1\4"+
    "\1\7\2\1\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\1\1\31\1\32\3\3\1\33"+
    "\24\3\1\34\1\35\6\3\1\36\1\37\16\3\1\40"+
    "\1\3\2\0\1\41\1\0\1\42\3\0\1\43\1\0"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\2\3\1\52"+
    "\1\53\1\54\1\3\1\55\5\3\1\56\7\3\1\57"+
    "\1\60\10\3\1\61\13\3\1\62\15\3\1\63\5\3"+
    "\1\64\1\65\1\0\5\3\1\66\1\67\1\70\1\71"+
    "\12\3\1\72\1\73\7\3\1\74\1\75\1\76\1\77"+
    "\1\3\1\100\4\3\1\101\2\3\1\102\3\3\1\103"+
    "\1\3\1\104\1\105\1\3\1\106\5\3\1\107\2\3"+
    "\1\110\1\111\1\112\20\3\1\113\2\3\1\114\4\3"+
    "\1\115\1\116\2\3\1\117\1\3\1\120\1\121\1\122"+
    "\5\3\1\123\1\124\1\3\1\125\1\3\1\126\1\127"+
    "\2\3\1\130\1\3\1\131\1\132\1\133\2\3\1\134"+
    "\1\3\1\135\1\136\1\137\1\3\1\140\1\3\1\141"+
    "\1\3\1\142\2\3\1\143\7\3\1\144\1\3\1\145"+
    "\1\146\5\3\1\147\1\150\3\3\1\151\3\3\1\152"+
    "\1\3\1\153\1\3\1\154\1\155\7\3\1\156\1\3"+
    "\1\157\7\3\1\160\1\161\6\3\1\162\1\163";

  private static int [] zzUnpackAction() {
    int [] result = new int[371];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\73\0\166\0\261\0\354\0\u0127\0\u0162"+
    "\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a"+
    "\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512"+
    "\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea"+
    "\0\u0725\0\73\0\73\0\73\0\73\0\73\0\73\0\73"+
    "\0\73\0\73\0\u0760\0\u079b\0\u07d6\0\u0811\0\73\0\73"+
    "\0\73\0\u084c\0\73\0\73\0\u0887\0\u08c2\0\u08fd\0\u0938"+
    "\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10"+
    "\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8"+
    "\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u03b0\0\u0e4a\0\u0e85"+
    "\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u03b0\0\u0fe7\0\u1022"+
    "\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa"+
    "\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u03b0\0\u1321\0\u135c\0\u1397"+
    "\0\73\0\u06af\0\73\0\u13d2\0\u06ea\0\u140d\0\u1448\0\u1483"+
    "\0\73\0\73\0\73\0\73\0\73\0\73\0\u14be\0\u14f9"+
    "\0\u03b0\0\u03b0\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b"+
    "\0\u1696\0\u16d1\0\u03b0\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8"+
    "\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0"+
    "\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u03b0\0\u1af7\0\u1b32\0\u1b6d"+
    "\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45"+
    "\0\u03b0\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2"+
    "\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u03b0\0\u207f"+
    "\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u135c\0\73\0\u21a6\0\u21e1"+
    "\0\u221c\0\u2257\0\u2292\0\u22cd\0\u03b0\0\u03b0\0\u03b0\0\u03b0"+
    "\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5"+
    "\0\u24e0\0\u251b\0\u03b0\0\u03b0\0\u2556\0\u2591\0\u25cc\0\u2607"+
    "\0\u2642\0\u267d\0\u26b8\0\u03b0\0\u03b0\0\u03b0\0\u03b0\0\u26f3"+
    "\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a\0\u03b0\0\u2855\0\u2890"+
    "\0\u03b0\0\u28cb\0\u2906\0\u2941\0\u03b0\0\u297c\0\u03b0\0\u03b0"+
    "\0\u29b7\0\u03b0\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u03b0"+
    "\0\u2b19\0\u2b54\0\u1483\0\u03b0\0\u03b0\0\u2b8f\0\u2bca\0\u2c05"+
    "\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd"+
    "\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u03b0\0\u2f3f\0\u2f7a"+
    "\0\u03b0\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u03b0\0\u30a1\0\u30dc"+
    "\0\u3117\0\u03b0\0\u3152\0\u03b0\0\u03b0\0\u03b0\0\u318d\0\u31c8"+
    "\0\u3203\0\u323e\0\u3279\0\u03b0\0\u03b0\0\u32b4\0\u03b0\0\u32ef"+
    "\0\u03b0\0\u03b0\0\u332a\0\u3365\0\u03b0\0\u33a0\0\u03b0\0\u03b0"+
    "\0\u03b0\0\u33db\0\u3416\0\u03b0\0\u3451\0\u03b0\0\u03b0\0\u03b0"+
    "\0\u348c\0\u03b0\0\u34c7\0\u03b0\0\u3502\0\u03b0\0\u353d\0\u3578"+
    "\0\u03b0\0\u35b3\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da\0\u3715"+
    "\0\u03b0\0\u3750\0\u03b0\0\u03b0\0\u378b\0\u37c6\0\u3801\0\u383c"+
    "\0\u3877\0\u03b0\0\u03b0\0\u38b2\0\u38ed\0\u3928\0\u03b0\0\u3963"+
    "\0\u399e\0\u39d9\0\u03b0\0\u3a14\0\u03b0\0\u3a4f\0\u03b0\0\u03b0"+
    "\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec\0\u03b0"+
    "\0\u3c27\0\u03b0\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89"+
    "\0\u3dc4\0\u03b0\0\u03b0\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb"+
    "\0\u3f26\0\u03b0\0\u03b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[371];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\22\1\25\1\26\1\22\1\27"+
    "\1\30\1\31\2\22\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\2\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\2"+
    "\77\0\1\22\1\65\4\22\1\66\24\22\2\0\1\22"+
    "\35\0\10\22\1\67\2\22\1\70\1\22\1\71\15\22"+
    "\2\0\1\22\35\0\4\22\1\72\1\73\25\22\2\0"+
    "\1\22\35\0\1\22\1\74\3\22\1\75\5\22\1\76"+
    "\1\77\12\22\1\100\3\22\2\0\1\22\35\0\6\22"+
    "\1\101\24\22\2\0\1\22\35\0\6\22\1\102\24\22"+
    "\2\0\1\22\35\0\10\22\1\103\4\22\1\104\4\22"+
    "\1\105\10\22\2\0\1\22\35\0\10\22\1\106\2\22"+
    "\1\107\17\22\2\0\1\22\35\0\7\22\1\110\4\22"+
    "\1\111\16\22\2\0\1\22\35\0\5\22\1\112\1\113"+
    "\3\22\1\114\20\22\2\0\1\22\35\0\10\22\1\115"+
    "\2\22\1\116\17\22\2\0\1\22\35\0\2\22\1\117"+
    "\1\120\1\121\1\22\1\122\3\22\1\123\15\22\1\124"+
    "\2\22\2\0\1\22\35\0\5\22\1\125\2\22\1\126"+
    "\12\22\1\127\7\22\2\0\1\22\35\0\12\22\1\130"+
    "\1\22\1\131\16\22\2\0\1\22\35\0\33\22\2\0"+
    "\1\22\35\0\4\22\1\132\5\22\1\133\20\22\2\0"+
    "\1\22\35\0\1\22\1\134\3\22\1\135\4\22\1\136"+
    "\1\22\1\137\16\22\2\0\1\22\35\0\14\22\1\140"+
    "\16\22\2\0\1\22\35\0\5\22\1\141\1\142\24\22"+
    "\2\0\1\22\35\0\14\22\1\143\16\22\2\0\1\22"+
    "\35\0\6\22\1\144\20\22\1\145\3\22\2\0\1\22"+
    "\35\0\12\22\1\146\20\22\2\0\1\22\73\0\1\147"+
    "\30\0\37\150\1\0\33\150\36\0\1\32\2\0\1\35"+
    "\67\0\1\35\2\0\1\35\1\147\72\0\1\151\30\0"+
    "\43\152\1\153\1\154\26\152\44\155\1\156\1\153\25\155"+
    "\46\0\1\157\1\160\115\0\1\161\60\0\1\162\1\0"+
    "\1\163\70\0\1\164\50\0\1\32\2\0\1\35\16\0"+
    "\1\165\72\0\1\166\16\0\2\22\1\167\30\22\2\0"+
    "\1\22\35\0\5\22\1\170\25\22\2\0\1\22\35\0"+
    "\11\22\1\171\15\22\1\172\3\22\2\0\1\22\35\0"+
    "\3\22\1\173\7\22\1\174\17\22\2\0\1\22\35\0"+
    "\15\22\1\175\15\22\2\0\1\22\35\0\6\22\1\176"+
    "\24\22\2\0\1\22\35\0\7\22\1\177\23\22\2\0"+
    "\1\22\35\0\13\22\1\200\1\22\1\201\15\22\2\0"+
    "\1\22\35\0\6\22\1\202\24\22\2\0\1\22\35\0"+
    "\16\22\1\203\14\22\2\0\1\22\35\0\1\204\7\22"+
    "\1\205\22\22\2\0\1\22\35\0\23\22\1\206\7\22"+
    "\2\0\1\22\35\0\1\22\1\207\31\22\2\0\1\22"+
    "\35\0\1\210\1\22\1\211\6\22\1\212\3\22\1\213"+
    "\15\22\2\0\1\22\35\0\11\22\1\214\21\22\2\0"+
    "\1\22\35\0\13\22\1\215\17\22\2\0\1\22\35\0"+
    "\2\22\1\216\7\22\1\217\10\22\1\220\7\22\2\0"+
    "\1\22\35\0\12\22\1\221\4\22\1\222\13\22\2\0"+
    "\1\22\35\0\12\22\1\223\20\22\2\0\1\22\35\0"+
    "\15\22\1\224\15\22\2\0\1\22\35\0\2\22\1\225"+
    "\5\22\1\226\1\227\21\22\2\0\1\22\35\0\14\22"+
    "\1\230\16\22\2\0\1\22\35\0\2\22\1\231\10\22"+
    "\1\232\1\22\1\233\15\22\2\0\1\22\35\0\13\22"+
    "\1\234\17\22\2\0\1\22\35\0\11\22\1\235\21\22"+
    "\2\0\1\22\35\0\1\22\1\236\31\22\2\0\1\22"+
    "\35\0\1\22\1\237\31\22\2\0\1\22\35\0\14\22"+
    "\1\240\16\22\2\0\1\22\35\0\2\22\1\241\30\22"+
    "\2\0\1\22\35\0\10\22\1\242\22\22\2\0\1\22"+
    "\35\0\12\22\1\243\20\22\2\0\1\22\35\0\11\22"+
    "\1\244\21\22\2\0\1\22\35\0\2\22\1\245\30\22"+
    "\2\0\1\22\35\0\1\246\32\22\2\0\1\22\35\0"+
    "\1\22\1\247\31\22\2\0\1\22\35\0\6\22\1\250"+
    "\24\22\2\0\1\22\35\0\2\22\1\251\30\22\2\0"+
    "\1\22\35\0\15\22\1\252\15\22\2\0\1\22\35\0"+
    "\14\22\1\253\16\22\2\0\1\22\35\0\6\22\1\254"+
    "\6\22\1\255\15\22\2\0\1\22\35\0\5\22\1\256"+
    "\25\22\2\0\1\22\35\0\5\22\1\257\25\22\2\0"+
    "\1\22\35\0\14\22\1\260\16\22\2\0\1\22\35\0"+
    "\5\22\1\261\25\22\2\0\1\22\35\0\12\22\1\262"+
    "\20\22\2\0\1\22\35\0\24\22\1\263\6\22\2\0"+
    "\1\22\35\0\6\22\1\264\24\22\2\0\1\22\67\0"+
    "\1\265\2\0\1\265\31\0\37\150\1\266\33\150\1\152"+
    "\2\0\70\152\1\155\2\0\70\155\1\157\2\0\70\157"+
    "\1\160\1\0\45\160\1\267\23\160\4\0\3\22\1\270"+
    "\27\22\2\0\1\22\35\0\24\22\1\271\6\22\2\0"+
    "\1\22\35\0\6\22\1\272\24\22\2\0\1\22\35\0"+
    "\6\22\1\273\24\22\2\0\1\22\35\0\13\22\1\274"+
    "\17\22\2\0\1\22\35\0\10\22\1\275\22\22\2\0"+
    "\1\22\35\0\6\22\1\276\24\22\2\0\1\22\35\0"+
    "\6\22\1\277\24\22\2\0\1\22\35\0\15\22\1\300"+
    "\15\22\2\0\1\22\35\0\1\22\1\301\31\22\2\0"+
    "\1\22\35\0\1\302\32\22\2\0\1\22\35\0\2\22"+
    "\1\303\10\22\1\304\17\22\2\0\1\22\35\0\4\22"+
    "\1\305\26\22\2\0\1\22\35\0\11\22\1\306\21\22"+
    "\2\0\1\22\35\0\14\22\1\307\16\22\2\0\1\22"+
    "\35\0\7\22\1\310\23\22\2\0\1\22\35\0\7\22"+
    "\1\311\23\22\2\0\1\22\35\0\1\22\1\312\31\22"+
    "\2\0\1\22\35\0\13\22\1\313\17\22\2\0\1\22"+
    "\35\0\6\22\1\314\24\22\2\0\1\22\35\0\5\22"+
    "\1\315\25\22\2\0\1\22\35\0\13\22\1\316\17\22"+
    "\2\0\1\22\35\0\15\22\1\317\15\22\2\0\1\22"+
    "\35\0\14\22\1\320\4\22\1\321\11\22\2\0\1\22"+
    "\35\0\12\22\1\322\20\22\2\0\1\22\35\0\10\22"+
    "\1\323\22\22\2\0\1\22\35\0\15\22\1\324\15\22"+
    "\2\0\1\22\35\0\6\22\1\325\24\22\2\0\1\22"+
    "\35\0\6\22\1\326\24\22\2\0\1\22\35\0\23\22"+
    "\1\327\7\22\2\0\1\22\35\0\1\22\1\330\31\22"+
    "\2\0\1\22\35\0\3\22\1\331\27\22\2\0\1\22"+
    "\35\0\6\22\1\332\24\22\2\0\1\22\35\0\2\22"+
    "\1\333\30\22\2\0\1\22\35\0\6\22\1\334\24\22"+
    "\2\0\1\22\35\0\5\22\1\335\25\22\2\0\1\22"+
    "\35\0\10\22\1\336\22\22\2\0\1\22\35\0\5\22"+
    "\1\337\25\22\2\0\1\22\35\0\24\22\1\340\6\22"+
    "\2\0\1\22\35\0\23\22\1\341\7\22\2\0\1\22"+
    "\35\0\6\22\1\342\24\22\2\0\1\22\35\0\12\22"+
    "\1\343\20\22\2\0\1\22\35\0\12\22\1\344\20\22"+
    "\2\0\1\22\35\0\11\22\1\345\21\22\2\0\1\22"+
    "\35\0\5\22\1\346\2\22\1\347\22\22\2\0\1\22"+
    "\35\0\4\22\1\350\26\22\2\0\1\22\35\0\13\22"+
    "\1\351\17\22\2\0\1\22\35\0\1\352\32\22\2\0"+
    "\1\22\35\0\15\22\1\353\15\22\2\0\1\22\35\0"+
    "\2\22\1\354\30\22\2\0\1\22\35\0\6\22\1\355"+
    "\24\22\2\0\1\22\35\0\20\22\1\356\12\22\2\0"+
    "\1\22\35\0\12\22\1\357\20\22\2\0\1\22\35\0"+
    "\10\22\1\360\22\22\2\0\1\22\35\0\12\22\1\361"+
    "\20\22\2\0\1\22\35\0\15\22\1\362\15\22\2\0"+
    "\1\22\31\0\1\160\1\0\44\160\1\363\1\267\23\160"+
    "\4\0\4\22\1\364\26\22\2\0\1\22\35\0\6\22"+
    "\1\365\24\22\2\0\1\22\35\0\10\22\1\366\22\22"+
    "\2\0\1\22\35\0\5\22\1\367\25\22\2\0\1\22"+
    "\35\0\4\22\1\370\26\22\2\0\1\22\35\0\2\22"+
    "\1\371\30\22\2\0\1\22\35\0\12\22\1\372\20\22"+
    "\2\0\1\22\35\0\1\22\1\373\31\22\2\0\1\22"+
    "\35\0\2\22\1\374\30\22\2\0\1\22\35\0\6\22"+
    "\1\375\24\22\2\0\1\22\35\0\6\22\1\376\24\22"+
    "\2\0\1\22\35\0\16\22\1\377\14\22\2\0\1\22"+
    "\35\0\5\22\1\u0100\25\22\2\0\1\22\35\0\3\22"+
    "\1\u0101\27\22\2\0\1\22\35\0\2\22\1\u0102\30\22"+
    "\2\0\1\22\35\0\1\22\1\u0103\31\22\2\0\1\22"+
    "\35\0\2\22\1\u0104\30\22\2\0\1\22\35\0\1\22"+
    "\1\u0105\31\22\2\0\1\22\35\0\10\22\1\u0106\22\22"+
    "\2\0\1\22\35\0\7\22\1\u0107\23\22\2\0\1\22"+
    "\35\0\10\22\1\u0108\22\22\2\0\1\22\35\0\24\22"+
    "\1\u0109\6\22\2\0\1\22\35\0\3\22\1\u010a\27\22"+
    "\2\0\1\22\35\0\6\22\1\u010b\24\22\2\0\1\22"+
    "\35\0\2\22\1\u010c\30\22\2\0\1\22\35\0\12\22"+
    "\1\u010d\20\22\2\0\1\22\35\0\22\22\1\u010e\10\22"+
    "\2\0\1\22\35\0\2\22\1\u010f\30\22\2\0\1\22"+
    "\35\0\2\22\1\u0110\30\22\2\0\1\22\35\0\15\22"+
    "\1\u0111\15\22\2\0\1\22\35\0\5\22\1\u0112\25\22"+
    "\2\0\1\22\35\0\14\22\1\u0113\16\22\2\0\1\22"+
    "\35\0\2\22\1\u0114\30\22\2\0\1\22\35\0\6\22"+
    "\1\u0115\24\22\2\0\1\22\35\0\6\22\1\u0116\24\22"+
    "\2\0\1\22\35\0\11\22\1\u0117\21\22\2\0\1\22"+
    "\35\0\6\22\1\u0118\24\22\2\0\1\22\35\0\1\22"+
    "\1\u0119\31\22\2\0\1\22\35\0\12\22\1\u011a\20\22"+
    "\2\0\1\22\35\0\14\22\1\u011b\16\22\2\0\1\22"+
    "\35\0\10\22\1\u011c\22\22\2\0\1\22\35\0\11\22"+
    "\1\u011d\21\22\2\0\1\22\35\0\11\22\1\u011e\21\22"+
    "\2\0\1\22\35\0\2\22\1\u011f\30\22\2\0\1\22"+
    "\35\0\14\22\1\u0120\16\22\2\0\1\22\35\0\6\22"+
    "\1\u0121\24\22\2\0\1\22\35\0\2\22\1\u0122\30\22"+
    "\2\0\1\22\35\0\12\22\1\u0123\20\22\2\0\1\22"+
    "\35\0\5\22\1\u0124\25\22\2\0\1\22\35\0\5\22"+
    "\1\u0125\25\22\2\0\1\22\35\0\5\22\1\u0126\25\22"+
    "\2\0\1\22\35\0\6\22\1\u0127\24\22\2\0\1\22"+
    "\35\0\10\22\1\u0128\22\22\2\0\1\22\35\0\6\22"+
    "\1\u0129\24\22\2\0\1\22\35\0\12\22\1\u012a\20\22"+
    "\2\0\1\22\35\0\3\22\1\u012b\27\22\2\0\1\22"+
    "\35\0\13\22\1\u012c\17\22\2\0\1\22\35\0\12\22"+
    "\1\u012d\20\22\2\0\1\22\35\0\6\22\1\u012e\24\22"+
    "\2\0\1\22\35\0\11\22\1\u012f\21\22\2\0\1\22"+
    "\35\0\4\22\1\u0130\26\22\2\0\1\22\35\0\10\22"+
    "\1\u0131\22\22\2\0\1\22\35\0\6\22\1\u0132\24\22"+
    "\2\0\1\22\35\0\10\22\1\u0133\22\22\2\0\1\22"+
    "\35\0\13\22\1\u0134\17\22\2\0\1\22\35\0\6\22"+
    "\1\u0135\24\22\2\0\1\22\35\0\6\22\1\u0136\24\22"+
    "\2\0\1\22\35\0\10\22\1\u0137\22\22\2\0\1\22"+
    "\35\0\2\22\1\u0138\30\22\2\0\1\22\35\0\5\22"+
    "\1\u0139\25\22\2\0\1\22\35\0\3\22\1\u013a\27\22"+
    "\2\0\1\22\35\0\15\22\1\u013b\15\22\2\0\1\22"+
    "\35\0\11\22\1\u013c\21\22\2\0\1\22\35\0\12\22"+
    "\1\u013d\20\22\2\0\1\22\35\0\5\22\1\u013e\25\22"+
    "\2\0\1\22\35\0\10\22\1\u013f\22\22\2\0\1\22"+
    "\35\0\1\22\1\u0140\31\22\2\0\1\22\35\0\13\22"+
    "\1\u0141\17\22\2\0\1\22\35\0\14\22\1\u0142\16\22"+
    "\2\0\1\22\35\0\2\22\1\u0143\30\22\2\0\1\22"+
    "\35\0\10\22\1\u0144\22\22\2\0\1\22\35\0\11\22"+
    "\1\u0145\21\22\2\0\1\22\35\0\3\22\1\u0146\27\22"+
    "\2\0\1\22\35\0\13\22\1\u0147\17\22\2\0\1\22"+
    "\35\0\1\22\1\u0148\31\22\2\0\1\22\35\0\6\22"+
    "\1\u0149\24\22\2\0\1\22\35\0\4\22\1\u014a\26\22"+
    "\2\0\1\22\35\0\6\22\1\u014b\24\22\2\0\1\22"+
    "\35\0\12\22\1\u014c\20\22\2\0\1\22\35\0\10\22"+
    "\1\u014d\22\22\2\0\1\22\35\0\2\22\1\u014e\30\22"+
    "\2\0\1\22\35\0\13\22\1\u014f\17\22\2\0\1\22"+
    "\35\0\12\22\1\u0150\20\22\2\0\1\22\35\0\10\22"+
    "\1\u0151\22\22\2\0\1\22\35\0\12\22\1\u0152\20\22"+
    "\2\0\1\22\35\0\2\22\1\u0153\30\22\2\0\1\22"+
    "\35\0\2\22\1\u0154\30\22\2\0\1\22\35\0\15\22"+
    "\1\u0155\15\22\2\0\1\22\35\0\5\22\1\u0156\25\22"+
    "\2\0\1\22\35\0\3\22\1\u0157\27\22\2\0\1\22"+
    "\35\0\24\22\1\u0158\6\22\2\0\1\22\35\0\6\22"+
    "\1\u0159\24\22\2\0\1\22\35\0\10\22\1\u015a\22\22"+
    "\2\0\1\22\35\0\13\22\1\u015b\17\22\2\0\1\22"+
    "\35\0\10\22\1\u015c\22\22\2\0\1\22\35\0\23\22"+
    "\1\u015d\7\22\2\0\1\22\35\0\1\u015e\32\22\2\0"+
    "\1\22\35\0\13\22\1\u015f\17\22\2\0\1\22\35\0"+
    "\2\22\1\u0160\30\22\2\0\1\22\35\0\4\22\1\u0161"+
    "\26\22\2\0\1\22\35\0\24\22\1\u0162\6\22\2\0"+
    "\1\22\35\0\1\22\1\u0163\31\22\2\0\1\22\35\0"+
    "\12\22\1\u0164\20\22\2\0\1\22\35\0\2\22\1\u0165"+
    "\30\22\2\0\1\22\35\0\12\22\1\u0166\20\22\2\0"+
    "\1\22\35\0\2\22\1\u0167\30\22\2\0\1\22\35\0"+
    "\10\22\1\u0168\22\22\2\0\1\22\35\0\23\22\1\u0169"+
    "\7\22\2\0\1\22\35\0\23\22\1\u016a\7\22\2\0"+
    "\1\22\35\0\4\22\1\u016b\26\22\2\0\1\22\35\0"+
    "\1\22\1\u016c\31\22\2\0\1\22\35\0\1\22\1\u016d"+
    "\31\22\2\0\1\22\35\0\2\22\1\u016e\30\22\2\0"+
    "\1\22\35\0\2\22\1\u016f\30\22\2\0\1\22\35\0"+
    "\14\22\1\u0170\16\22\2\0\1\22\35\0\4\22\1\u0171"+
    "\26\22\2\0\1\22\35\0\5\22\1\u0172\25\22\2\0"+
    "\1\22\35\0\13\22\1\u0173\17\22\2\0\1\22\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16225];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\36\1\11\11\4\1\3\11\1\1\2\11"+
    "\62\1\2\0\1\11\1\0\1\11\3\0\1\1\1\0"+
    "\6\11\77\1\1\11\1\0\274\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[371];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _CypherLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CypherLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 116: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 117: break;
          case 3: 
            { return L_IDENTIFIER;
            }
          case 118: break;
          case 4: 
            { return L_INTEGER;
            }
          case 119: break;
          case 5: 
            { return OP_BACTICK;
            }
          case 120: break;
          case 6: 
            { return OP_MINUS;
            }
          case 121: break;
          case 7: 
            { return OP_DOT;
            }
          case 122: break;
          case 8: 
            { return OP_DIVIDE;
            }
          case 123: break;
          case 9: 
            { return OP_MUL;
            }
          case 124: break;
          case 10: 
            { return SEMICOLON;
            }
          case 125: break;
          case 11: 
            { return PARENTHESE_OPEN;
            }
          case 126: break;
          case 12: 
            { return PARENTHESE_CLOSE;
            }
          case 127: break;
          case 13: 
            { return BRACKET_CURLYOPEN;
            }
          case 128: break;
          case 14: 
            { return BRACKET_CURLYCLOSE;
            }
          case 129: break;
          case 15: 
            { return BRACKET_SQUAREOPEN;
            }
          case 130: break;
          case 16: 
            { return BRACKET_SQUARECLOSE;
            }
          case 131: break;
          case 17: 
            { return OP_COLON;
            }
          case 132: break;
          case 18: 
            { return OP_EQUAL;
            }
          case 133: break;
          case 19: 
            { return OP_LESSTHEN;
            }
          case 134: break;
          case 20: 
            { return OP_GREATHERTHEN;
            }
          case 135: break;
          case 21: 
            { return OP_PLUS;
            }
          case 136: break;
          case 22: 
            { return OP_COMMA;
            }
          case 137: break;
          case 23: 
            { return OP_QUESTIONSIGN;
            }
          case 138: break;
          case 24: 
            { return OP_PIPE;
            }
          case 139: break;
          case 25: 
            { return OP_MODULO;
            }
          case 140: break;
          case 26: 
            { return OP_POW;
            }
          case 141: break;
          case 27: 
            { return K_AS;
            }
          case 142: break;
          case 28: 
            { return K_IN;
            }
          case 143: break;
          case 29: 
            { return K_IS;
            }
          case 144: break;
          case 30: 
            { return K_OR;
            }
          case 145: break;
          case 31: 
            { return K_ON;
            }
          case 146: break;
          case 32: 
            { return K_BY;
            }
          case 147: break;
          case 33: 
            { return OP_RANGE;
            }
          case 148: break;
          case 34: 
            { return L_STRING;
            }
          case 149: break;
          case 35: 
            { return LINECOMMENT;
            }
          case 150: break;
          case 36: 
            { return OP_REGEXMATCH;
            }
          case 151: break;
          case 37: 
            { return OP_LESSTHANEQUALS;
            }
          case 152: break;
          case 38: 
            { return OP_INVALIDNOTEQUALS;
            }
          case 153: break;
          case 39: 
            { return OP_GREATERTHANEQUALS;
            }
          case 154: break;
          case 40: 
            { return OP_PLUSEQUALS;
            }
          case 155: break;
          case 41: 
            { return OP_NOTEQUALS;
            }
          case 156: break;
          case 42: 
            { return K_AND;
            }
          case 157: break;
          case 43: 
            { return K_ANY;
            }
          case 158: break;
          case 44: 
            { return K_ASC;
            }
          case 159: break;
          case 45: 
            { return K_ALL;
            }
          case 160: break;
          case 46: 
            { return K_CSV;
            }
          case 161: break;
          case 47: 
            { return K_REL;
            }
          case 162: break;
          case 48: 
            { return K_END;
            }
          case 163: break;
          case 49: 
            { return K_NOT;
            }
          case 164: break;
          case 50: 
            { return K_SET;
            }
          case 165: break;
          case 51: 
            { return K_XOR;
            }
          case 166: break;
          case 52: 
            { return L_DECIMAL;
            }
          case 167: break;
          case 53: 
            { return L_IDENTIFIER_TEXT;
            }
          case 168: break;
          case 54: 
            { return K_THEN;
            }
          case 169: break;
          case 55: 
            { return K_TRUE;
            }
          case 170: break;
          case 56: 
            { return K_CASE;
            }
          case 171: break;
          case 57: 
            { return K_CALL;
            }
          case 172: break;
          case 58: 
            { return K_ENDS;
            }
          case 173: break;
          case 59: 
            { return K_ELSE;
            }
          case 174: break;
          case 60: 
            { return K_NULL;
            }
          case 175: break;
          case 61: 
            { return K_NONE;
            }
          case 176: break;
          case 62: 
            { return K_NODE;
            }
          case 177: break;
          case 63: 
            { return K_DROP;
            }
          case 178: break;
          case 64: 
            { return K_DESC;
            }
          case 179: break;
          case 65: 
            { return K_SCAN;
            }
          case 180: break;
          case 66: 
            { return K_SKIP;
            }
          case 181: break;
          case 67: 
            { return K_LOAD;
            }
          case 182: break;
          case 68: 
            { return K_WHEN;
            }
          case 183: break;
          case 69: 
            { return K_WITH;
            }
          case 184: break;
          case 70: 
            { return K_FROM;
            }
          case 185: break;
          case 71: 
            { return K_JOIN;
            }
          case 186: break;
          case 72: 
            { return BLOCKCOMMENT;
            }
          case 187: break;
          case 73: 
            { return K_MATCH;
            }
          case 188: break;
          case 74: 
            { return K_MERGE;
            }
          case 189: break;
          case 75: 
            { return K_UNION;
            }
          case 190: break;
          case 76: 
            { return K_USING;
            }
          case 191: break;
          case 77: 
            { return K_INDEX;
            }
          case 192: break;
          case 78: 
            { return K_START;
            }
          case 193: break;
          case 79: 
            { return K_ORDER;
            }
          case 194: break;
          case 80: 
            { return K_LIMIT;
            }
          case 195: break;
          case 81: 
            { return K_WHERE;
            }
          case 196: break;
          case 82: 
            { return K_FALSE;
            }
          case 197: break;
          case 83: 
            { return K_BEGIN;
            }
          case 198: break;
          case 84: 
            { return K_YIELD;
            }
          case 199: break;
          case 85: 
            { return K_ASSERT;
            }
          case 200: break;
          case 86: 
            { return K_CREATE;
            }
          case 201: break;
          case 87: 
            { return K_COMMIT;
            }
          case 202: break;
          case 88: 
            { return K_CYPHER;
            }
          case 203: break;
          case 89: 
            { return K_REMOVE;
            }
          case 204: break;
          case 90: 
            { return K_RETURN;
            }
          case 205: break;
          case 91: 
            { return K_REDUCE;
            }
          case 206: break;
          case 92: 
            { return K_EXISTS;
            }
          case 207: break;
          case 93: 
            { return K_UNIQUE;
            }
          case 208: break;
          case 94: 
            { return K_UNWIND;
            }
          case 209: break;
          case 95: 
            { return K_DETACH;
            }
          case 210: break;
          case 96: 
            { return K_DELETE;
            }
          case 211: break;
          case 97: 
            { return K_STARTS;
            }
          case 212: break;
          case 98: 
            { return K_SINGLE;
            }
          case 213: break;
          case 99: 
            { return K_FILTER;
            }
          case 214: break;
          case 100: 
            { return K_HEADERS;
            }
          case 215: break;
          case 101: 
            { return K_EXTRACT;
            }
          case 216: break;
          case 102: 
            { return K_EXPLAIN;
            }
          case 217: break;
          case 103: 
            { return K_FOREACH;
            }
          case 218: break;
          case 104: 
            { return K_PROFILE;
            }
          case 219: break;
          case 105: 
            { return K_CONTAINS;
            }
          case 220: break;
          case 106: 
            { return K_DISTINCT;
            }
          case 221: break;
          case 107: 
            { return K_OPTIONAL;
            }
          case 222: break;
          case 108: 
            { return K_PERIODIC;
            }
          case 223: break;
          case 109: 
            { return K_ASCENDING;
            }
          case 224: break;
          case 110: 
            { return K_CONSTRAINT;
            }
          case 225: break;
          case 111: 
            { return K_DESCENDING;
            }
          case 226: break;
          case 112: 
            { return K_RELATIONSHIP;
            }
          case 227: break;
          case 113: 
            { return K_SHORTESTPATH;
            }
          case 228: break;
          case 114: 
            { return K_FIELDTERMINATOR;
            }
          case 229: break;
          case 115: 
            { return K_ALLSHORTESTPATHS;
            }
          case 230: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
