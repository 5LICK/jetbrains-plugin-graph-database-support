package com.neueda.jetbrains.plugin.cypher.lang;

import com.google.common.collect.Lists;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Regular expressions for Cypher and other misc stuff.
 *
 * TODO: this class has bad name.
 */
public final class CypherRegexp {

    public static final String SYMBOLIC_NAME_REGEXP = "(([a-zA-Z_$][a-zA-Z_$0-9]*)|(`[^`]+`))";
    public static final List<String> KEYWORDS = Lists.newArrayList(
            "MATCH",
            "RETURN",
            "DISTINCT",
            "UNION",
            "ALL",
            "LOAD",
            "CSV",
            "WITH",
            "HEADERS",
            "FROM",
            "AS",
            "FIELDTERMINATOR",
            "CREATE",
            "CONSTRAINT",
            "ON",
            "ASSERT",
            "IS",
            "UNIQUE",
            "ASSERT",
            "EXISTS",
            "INDEX",
            "DROP",
            "START",
            "WHERE",
            "NODE",
            "RELATIONSHIP",
            "REL",
            "MATCH",
            "OPTIONAL",
            "USING",
            "JOIN",
            "SCAN",
            "SHORTESTPATH",
            "ALLSHORTESTPATHS",
            "UNWIND",
            "MERGE",
            "SET",
            "DELETE",
            "DETACH",
            "REMOVE",
            "FOREACH",
            "IN",
            "ORDER",
            "BY",
            "DESCENDING",
            "DESC",
            "ASCENDING",
            "ASC",
            "SKIP",
            "LIMIT",
            "PERIODIC",
            "COMMIT",
            "XOR",
            "OR",
            "AND",
            "NOT",
            "STARTS",
            "ENDS",
            "CONTAINS",
            "NULL",
            "TRUE",
            "FALSE",
            "COUNT",
            "FILTER",
            "EXTRACT",
            "REDUCE",
            "ALL",
            "ANY",
            "NONE",
            "SINGLE",
            "CASE",
            "DISTINCT",
            "ELSE",
            "END",
            "WHEN",
            "THEN",
            "PROFILE",
            "EXPLAIN",
            "CYPHER",
            "PLANNER",
            "CALL",
            "YIELD"
    );
    public static final List<String> FUNCTIONS = Lists.newArrayList(
            "abs",
            "acos",
            "asin",
            "atan",
            "atan2",
            "avg",
            "ceil",
            "coalesce",
            "collect",
            "ceil",
            "cos",
            "cot",
            "count",
            "degrees",
            "e",
            "endNode",
            "exists",
            "exp",
            "floor",
            "has",
            "haversin",
            "head",
            "id",
            "labels",
            "last",
            "left",
            "length",
            "log",
            "log10",
            "lower",
            "lTrim",
            "max",
            "min",
            "nodes",
            "pi",
            "percentileCont",
            "percentileDisc",
            "keys",
            "radians",
            "rand",
            "range",
            "reduce",
            "relationships",
            "rels",
            "replace",
            "reverse",
            "right",
            "round",
            "rTrim",
            "sign",
            "sin",
            "size",
            "sqrt",
            "split",
            "startNode",
            "stdDev",
            "stdDevP",
            "str",
            "substring",
            "sum",
            "tail",
            "tan",
            "timestamp",
            "toFloat",
            "toInt",
            "toLower",
            "toString",
            "toUpper",
            "trim",
            "type",
            "upper"
    );
    public static final List<String> ALL_KEYWORDS = new ArrayList<String>() {{
        addAll(KEYWORDS.stream().map(String::toLowerCase).collect(Collectors.toList()));
        // disable: functions are replaced with identifiers
        //addAll(FUNCTIONS.stream().map(String::toLowerCase).collect(Collectors.toList()));
    }};

    private CypherRegexp() {
    }
}
